plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.google.devtools.ksp)
    id("com.google.gms.google-services")
    id("com.google.dagger.hilt.android")
}

android {
    namespace 'net.streamroutes.sreamroutesapp'
    compileSdk 34

    defaultConfig {
        applicationId "net.streamroutes.sreamroutesapp"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.13'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation(libs.androidx.compose.material3)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.compose.material3)

    // FOR COLORPICKER (skydoves)
    implementation(libs.compose.colorpicker)
    // END FOR COLORPICKER

    // FOR LIVE DATA
    implementation(libs.runtime.livedata)
    // END FOR LIVEDATA

    // FOR WORKMANAGER
    implementation(libs.work.runtime)
    // END FOR WORKMANAGER

    // FOR VIEWMODEL
    implementation(libs.lifecycle.viewmodel)
    // END FOR VIEWMODEL

    // FOR GOOGLE PAGER
    implementation(libs.pager.indicators)
    // END FOR GOOGLE PAGER

    // FOR MAPS SERVICES
    implementation(libs.play.services.location)
    implementation(libs.play.services.maps)
    // END FOR MAPS SERVICES

    // FOR GOOGLE MAPS
    implementation(libs.maps.compose)
    // END FOR GOOGLE MAPS

    // FOR NAVIGATION
    implementation(libs.navigation.compose)
    // END FOR NAVIGATION

    // FOR PERMISSIONS
    implementation(libs.accompanist.permissions)
    // END FOR PERMISSIONS

    // FOR COROUTINES
    implementation(libs.kotlinx.coroutines)
    // END FOR COROUTINES

    // FOR ROOM
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    ksp(libs.androidx.room.compiler)
    // END FOR ROOM

    // FOR EXTENDED ICONS
    implementation(libs.androidx.compose.material)
    // END FOR EXTENDED ICONS

    // FOR RETROFIT
    implementation(libs.retrofit)
    implementation(libs.retrofit.converter.gson)
    // END FOR RETROFIT

    // FOR SYSTEM CONTROLLER
    implementation(libs.systemuicontroller)
    // END FOR SYSTEM CONTROLLER

    // FOR CAMERA X
    implementation(libs.camera)
    implementation(libs.camera.lifecycle)
    implementation(libs.camera.view)
    // END FOR CAMERA X

    // FOR QR SCANNER
    implementation(libs.barcode.scanning)
    // END FOR QR SCANNER

    // FOR QR CODER
    implementation(libs.zxing.core)
    implementation(libs.guava)
    // END FOR QR CODER

    // FOR IMAGES
    implementation(libs.coil.compose)
    // END FOR IMAGES

    // FOR DAGGER HILT
    implementation(libs.hilt.android)
    ksp(libs.hilt.android.compiler)
    // END FOR DAGGER HILT

    // FOR FIREBASE
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.auth)
    implementation(libs.firebase.database)
    implementation(libs.firebase.firestore)
    // END FOR FIREBASE

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)

}